function solve() {
    let a = parseFloat(document.getElementById('a').value);
    let b = parseFloat(document.getElementById('b').value);
    let c = parseFloat(document.getElementById('c').value);
    let err = '';

    if (isNaN(a)) {
        err = 'a 不是数字';
        document.getElementById('a').focus();
    } else if (isNaN(b)) {
        err = 'b 不是数字';
        document.getElementById('b').focus();
    } else if (isNaN(c)) {
        err = 'c 不是数字';
        document.getElementById('c').focus();
    } else {
        if (a === 0) {
            if (b === 0) {
                err = c === 0 ? "所有实数都是解" : "无解";
            } else {
                err = `x = ${-c / b}`;
            }
        } else {
            let delta = b ** 2 - 4 * a * c;
            if (delta > 0) {
                let x1 = (-b + Math.sqrt(delta)) / (2 * a);
                let x2 = (-b - Math.sqrt(delta)) / (2 * a);
                err = `两个实根：x₁ = ${x1.toFixed(2)}, x₂ = ${x2.toFixed(2)}`;
            } else if (delta === 0) {
                err = `唯一解：x = ${(-b / (2 * a)).toFixed(2)}`;
            } else {
                err = "无实根（有复数解）";
            }
        }
    }

    alert(err || "计算结果将显示在这里");
}


javascript objects
similar to C's struct,python'dictionary,PHP associative array,jaca's map, 
c++'s class/map/hashmap
extension of array:
array is a map from number -> value
object: any --> any type
key --> value
object is a collecttion of key-value pairs

syntax:
let x = { };
let y = {a:1, b:2.5, c:100}; //similar to CSS
let z = {"a d":1, "bz":2.5, "c":100};
the third one is the best
attribute = field = key
It's not necessary for all values to have the same type. Object can be inhomogeneous.

varstudentrecord={
    id:"D1233456",
    name:"John Smith",
    register:funtion(i,n)
    {
        studentrecord.id = i;
        studentrecord.name = n;
    }
};
studentrecord.register(1,"abc");

studentrecord also can be viewed as a family name
using family name is to promote software reusability
by reducing the chance of name collision

studentrecord.keys
studentrecord.values
studentrecord.entries

for loop:
for (let key in studentrecord) //iteration/traversal/go through
{
    console.log(studentrecord.key);
    console.log(studentrecord[key]);
}
for (let value in studentrecord)
{
    console.log(value);
}

